import { AbortError, assert } from 'errors';

/**
 * Runs provided sync|async tasks one by one passing prev task return value.
 * New calls to pipeline cancel prev calls.
 * @param {(...args, prevTaskReturnVa: any) => any} tasks
 * @returns {() => Promise<void>}
 */
export function pipeline(tasks = []) {
  let counter = 0;
  let running = true;

  const cancel = () => {
    running = false;
  };

  const returnValue = async (...args) => {
    if (running === false) {
      running = true;
    }
    counter += 1;
    const c = counter;
    let prevTaskReturnValue;
    try {
      for (let i = 0; i < tasks.length; i += 1) {
        if (c === counter && running) {
          prevTaskReturnValue = await tasks[i](...args, prevTaskReturnValue);
        } else {
          throw new AbortError();
        }
      }
      running = false;
      return prevTaskReturnValue;
    } catch (err) {
      assert(err instanceof AbortError, err);
    }
  };

  Object.assign(returnValue, {
    cancel,
    get running() {
      return running;
    },
  });

  return returnValue;
}
